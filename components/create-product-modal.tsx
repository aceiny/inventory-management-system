"use client";
import type React from "react";
import { useState, useEffect } from "react";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Switch } from "@/components/ui/switch";
import { useApp } from "@/contexts/app-context";
import { useProducts } from "@/hooks/use-products";
import { MODAL_TYPES } from "@/lib/constants";
import { useLanguage } from "@/contexts/language-context";
import { useSettings } from "@/contexts/settings-context";
import { useCategories } from "@/hooks/use-categories";
import { Plus, Trash2, Package, Sparkles } from "lucide-react";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";

interface ProductInstance {
  id: string;
  referenceNumber: string;
}

const initialFormData = {
  reference: "",
  name: "",
  description: "",
  category: "",
  quantity: 1,
  purchase_price: 0,
  selling_price: 0,
  enableIndividualReferences: false,
  status: "active" as "active" | "inactive" | "discontinued",
};

export function CreateProductModal() {
  const { activeModal, closeModal, triggerRefresh } = useApp();
  const { createProduct } = useProducts();
  const { categories } = useCategories();
  const [formData, setFormData] = useState(initialFormData);
  const [productInstances, setProductInstances] = useState<ProductInstance[]>(
    [],
  );
  const [isLoading, setIsLoading] = useState(false);
  const { t } = useLanguage();
  const { getCurrencyInfo } = useSettings();

  const isOpen = activeModal === MODAL_TYPES.CREATE_PRODUCT;

  // Generate instances when quantity changes or individual references are enabled
  useEffect(() => {
    if (formData.enableIndividualReferences && formData.quantity > 0) {
      const currentInstances = [...productInstances];
      const targetLength = formData.quantity;

      if (currentInstances.length < targetLength) {
        // Add more instances
        for (let i = currentInstances.length; i < targetLength; i++) {
          currentInstances.push({
            id: `${Date.now()}-${i}`,
            referenceNumber: `${formData.reference}-${String(i + 1).padStart(3, "0")}`,
          });
        }
        setProductInstances(currentInstances);
      } else if (currentInstances.length > targetLength) {
        // Remove excess instances
        currentInstances.splice(targetLength);
        setProductInstances(currentInstances);
      }
    } else {
      setProductInstances([]);
    }
  }, [formData.quantity, formData.enableIndividualReferences]);

  const handleInputChange = (
    e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>,
  ) => {
    const { name, value, type } = e.target;

    if (type === "checkbox") {
      const checked = (e.target as HTMLInputElement).checked;
      setFormData({
        ...formData,
        [name]: checked,
      });
    } else {
      const newFormData = {
        ...formData,
        [name]:
          name === "reference" ||
          name === "name" ||
          name === "description" ||
          name === "category" ||
          name === "status"
            ? value
            : Number.parseFloat(value) || 0,
      };

      // If the reference changed and individual tracking is enabled, update auto-generated references
      if (
        name === "reference" &&
        formData.enableIndividualReferences &&
        productInstances.length > 0
      ) {
        const updatedInstances = productInstances.map((instance, index) => {
          // Only update if the reference follows the auto-generated pattern or is empty
          const autoGenPattern = new RegExp(`^[^-]+-\\d{3}$`);
          const isAutoGenerated = autoGenPattern.test(instance.referenceNumber);

          if (isAutoGenerated || !instance.referenceNumber.trim()) {
            return {
              ...instance,
              referenceNumber: `${value}-${String(index + 1).padStart(3, "0")}`,
            };
          }
          return instance;
        });
        setProductInstances(updatedInstances);
      }

      setFormData(newFormData);
    }
  };

  const updateInstanceReference = (index: number, newReference: string) => {
    const updatedInstances = [...productInstances];
    updatedInstances[index].referenceNumber = newReference;
    setProductInstances(updatedInstances);
  };

  const addInstance = () => {
    const newInstance: ProductInstance = {
      id: `${Date.now()}-${productInstances.length}`,
      referenceNumber: `${formData.reference}-${String(productInstances.length + 1).padStart(3, "0")}`,
    };
    setProductInstances([...productInstances, newInstance]);
    setFormData({ ...formData, quantity: productInstances.length + 1 });
  };

  const removeInstance = (index: number) => {
    const updatedInstances = [...productInstances];
    updatedInstances.splice(index, 1);
    setProductInstances(updatedInstances);
    setFormData({ ...formData, quantity: updatedInstances.length });
  };

  const generateReferenceNumbers = () => {
    const updatedInstances = productInstances.map((instance, index) => {
      // Only update if the reference is empty or follows the auto-generated pattern
      const autoGenPattern = new RegExp(`^${formData.reference}-\\d{3}$`);
      const shouldUpdate =
        !instance.referenceNumber.trim() ||
        autoGenPattern.test(instance.referenceNumber);

      return {
        ...instance,
        referenceNumber: shouldUpdate
          ? `${formData.reference}-${String(index + 1).padStart(3, "0")}`
          : instance.referenceNumber,
      };
    });
    setProductInstances(updatedInstances);
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoading(true);

    // Prepare product data
    const { enableIndividualReferences, ...productBaseData } = formData;
    const productData = {
      ...productBaseData,
      lowStockThreshold: 5, // Default low stock threshold
      instances: enableIndividualReferences
        ? productInstances.map((instance) => ({
            ...instance,
            status: "available" as const,
          }))
        : undefined,
    };

    const success = await createProduct(productData);

    if (success) {
      setFormData(initialFormData);
      setProductInstances([]);
      closeModal();
      triggerRefresh();
    }

    setIsLoading(false);
  };

  const handleClose = () => {
    setFormData(initialFormData);
    setProductInstances([]);
    closeModal();
  };

  const isFormValid = () => {
    const basicValidation =
      formData.reference &&
      formData.name &&
      formData.quantity > 0 &&
      formData.purchase_price >= 0 &&
      formData.selling_price >= 0;

    if (!basicValidation) return false;

    // If individual references are enabled, ensure all instances have valid reference numbers
    if (formData.enableIndividualReferences) {
      return productInstances.every(
        (instance) => instance.referenceNumber.trim() !== "",
      );
    }

    return true;
  };

  return (
    <Dialog open={isOpen} onOpenChange={handleClose}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto animate-in scale-in">
        <DialogHeader className="pb-4">
          <DialogTitle className="flex items-center gap-2 text-2xl">
            <Package className="h-6 w-6" />
            {t("products.addProduct")}
          </DialogTitle>
        </DialogHeader>

        <form onSubmit={handleSubmit} className="space-y-6">
          {/* Basic Product Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Basic Information</CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="reference" className="text-sm font-medium">
                    {t("products.reference")} *
                  </Label>
                  <Input
                    id="reference"
                    name="reference"
                    value={formData.reference}
                    onChange={handleInputChange}
                    required
                    placeholder="PROD001"
                    className="input-enhanced"
                  />
                </div>
                <div className="space-y-2">
                  <Label htmlFor="name" className="text-sm font-medium">
                    {t("products.name")} *
                  </Label>
                  <Input
                    id="name"
                    name="name"
                    value={formData.name}
                    onChange={handleInputChange}
                    required
                    placeholder={t("products.namePlaceholder")}
                    className="input-enhanced"
                  />
                </div>
              </div>

              <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
                <div className="space-y-2">
                  <Label htmlFor="category" className="text-sm font-medium">
                    Category
                  </Label>
                  <Select
                    value={formData.category || "none"}
                    onValueChange={(value) =>
                      setFormData({
                        ...formData,
                        category: value === "none" ? "" : value,
                      })
                    }
                  >
                    <SelectTrigger className="input-enhanced">
                      <SelectValue placeholder="Select a category" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="none">No category</SelectItem>
                      {categories.map((category) => (
                        <SelectItem key={category.id} value={category.name}>
                          <div className="flex items-center gap-2">
                            <div
                              className="w-3 h-3 rounded-full"
                              style={{ backgroundColor: category.color }}
                            />
                            {category.name}
                          </div>
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="status" className="text-sm font-medium">
                    Status
                  </Label>
                  <Select
                    value={formData.status}
                    onValueChange={(value) =>
                      setFormData({
                        ...formData,
                        status: value as "active" | "inactive" | "discontinued",
                      })
                    }
                  >
                    <SelectTrigger className="input-enhanced">
                      <SelectValue placeholder="Select status" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="active">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-green-500 rounded-full" />
                          Active
                        </div>
                      </SelectItem>
                      <SelectItem value="inactive">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-yellow-500 rounded-full" />
                          Inactive
                        </div>
                      </SelectItem>
                      <SelectItem value="discontinued">
                        <div className="flex items-center gap-2">
                          <div className="w-2 h-2 bg-red-500 rounded-full" />
                          Discontinued
                        </div>
                      </SelectItem>
                    </SelectContent>
                  </Select>
                </div>
                <div className="space-y-2">
                  <Label htmlFor="quantity" className="text-sm font-medium">
                    {t("products.quantity")} *
                  </Label>
                  <Input
                    id="quantity"
                    name="quantity"
                    type="number"
                    min="1"
                    value={formData.quantity}
                    onChange={handleInputChange}
                    required
                    placeholder="1"
                    className="input-enhanced"
                  />
                </div>
              </div>

              <div className="space-y-2">
                <Label htmlFor="description" className="text-sm font-medium">
                  Description
                </Label>
                <Textarea
                  id="description"
                  name="description"
                  value={formData.description}
                  onChange={handleInputChange}
                  placeholder="Product description and specifications..."
                  className="input-enhanced min-h-[80px]"
                />
              </div>
            </CardContent>
          </Card>

          {/* Pricing Information */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">Pricing</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <Label
                    htmlFor="purchase_price"
                    className="text-sm font-medium"
                  >
                    {t("products.purchasePrice")} ({getCurrencyInfo().CODE}) *
                  </Label>
                  <Input
                    id="purchase_price"
                    name="purchase_price"
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.purchase_price}
                    onChange={handleInputChange}
                    required
                    placeholder="0.00"
                    className="input-enhanced"
                  />
                </div>
                <div className="space-y-2">
                  <Label
                    htmlFor="selling_price"
                    className="text-sm font-medium"
                  >
                    {t("products.sellingPrice")} ({getCurrencyInfo().CODE}) *
                  </Label>
                  <Input
                    id="selling_price"
                    name="selling_price"
                    type="number"
                    min="0"
                    step="0.01"
                    value={formData.selling_price}
                    onChange={handleInputChange}
                    required
                    placeholder="0.00"
                    className="input-enhanced"
                  />
                </div>
              </div>

              {formData.purchase_price > 0 && formData.selling_price > 0 && (
                <div className="mt-4 p-3 bg-muted/50 rounded-lg">
                  <div className="flex justify-between items-center text-sm">
                    <span>Profit Margin:</span>
                    <Badge
                      variant={
                        formData.selling_price > formData.purchase_price
                          ? "default"
                          : "destructive"
                      }
                    >
                      {(
                        ((formData.selling_price - formData.purchase_price) /
                          formData.selling_price) *
                        100
                      ).toFixed(1)}
                      %
                    </Badge>
                  </div>
                  <div className="flex justify-between items-center text-sm mt-1">
                    <span>Profit per Unit:</span>
                    <span
                      className={
                        formData.selling_price > formData.purchase_price
                          ? "text-green-600"
                          : "text-red-600"
                      }
                    >
                      {getCurrencyInfo().SYMBOL}
                      {(
                        formData.selling_price - formData.purchase_price
                      ).toFixed(2)}
                    </span>
                  </div>
                </div>
              )}
            </CardContent>
          </Card>

          {/* Bulk Instance Tracking Section */}
          <Card className="border-2 border-dashed border-muted-foreground/20 hover:border-primary/30 transition-colors">
            <CardHeader>
              <div className="flex items-center justify-between">
                <div className="flex items-center gap-2">
                  <Sparkles className="h-5 w-5 text-primary" />
                  <CardTitle className="text-lg">Instance Tracking</CardTitle>
                  <span className="text-xs bg-primary/10 text-primary px-2 py-1 rounded-full">
                    Advanced
                  </span>
                </div>
                <Switch
                  id="enableIndividualReferences"
                  checked={formData.enableIndividualReferences}
                  onCheckedChange={(checked) =>
                    setFormData({
                      ...formData,
                      enableIndividualReferences: checked,
                    })
                  }
                />
              </div>
              <p className="text-sm text-muted-foreground mt-2">
                Create individual instances with unique reference numbers for
                detailed tracking
              </p>
            </CardHeader>

            {formData.enableIndividualReferences && (
              <CardContent className="space-y-4 animate-in fade-in-down">
                <div className="p-3 bg-primary/5 border border-primary/20 rounded-lg">
                  <div className="flex items-center justify-between">
                    <div>
                      <p className="font-medium text-sm">
                        Creating {formData.quantity} individual instances
                      </p>
                      <p className="text-xs text-muted-foreground">
                        Pattern: {formData.reference || "PROD001"}-001,{" "}
                        {formData.reference || "PROD001"}-002...
                      </p>
                    </div>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={generateReferenceNumbers}
                      disabled={!formData.reference}
                      className="flex items-center gap-2"
                    >
                      <Sparkles className="h-4 w-4" />
                      Generate
                    </Button>
                  </div>
                </div>

                <div className="space-y-3 max-h-64 overflow-y-auto border rounded-lg p-3 bg-muted/20">
                  {productInstances.map((instance, index) => (
                    <div
                      key={instance.id}
                      className="flex items-center gap-3 p-3 bg-white rounded-lg border border-muted group hover:border-primary/30 transition-colors"
                    >
                      <div className="flex items-center justify-center w-7 h-7 bg-primary/10 text-primary rounded-full text-xs font-medium">
                        {index + 1}
                      </div>
                      <div className="flex-1">
                        <Input
                          value={instance.referenceNumber}
                          onChange={(e) =>
                            updateInstanceReference(index, e.target.value)
                          }
                          placeholder={`${formData.reference}-${String(index + 1).padStart(3, "0")}`}
                          className="border-0 outline bg-transparent focus:bg-white text-black transition-colors text-sm"
                        />
                      </div>
                      {productInstances.length > 1 && (
                        <Button
                          type="button"
                          variant="ghost"
                          size="sm"
                          onClick={() => removeInstance(index)}
                          className="text-red-600 hover:text-red-700 hover:bg-red-50 opacity-0 group-hover:opacity-100 transition-opacity"
                        >
                          <Trash2 className="h-4 w-4" />
                        </Button>
                      )}
                    </div>
                  ))}

                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={addInstance}
                    className="w-full border-dashed hover:border-solid transition-all"
                  >
                    <Plus className="h-4 w-4 mr-2" />
                    Add Instance
                  </Button>
                </div>
              </CardContent>
            )}
          </Card>

          {/* Form Actions */}
          <div className="flex justify-end space-x-3 pt-4 border-t">
            <Button
              type="button"
              variant="outline"
              onClick={handleClose}
              disabled={isLoading}
            >
              {t("common.cancel")}
            </Button>
            <Button
              type="submit"
              disabled={isLoading || !isFormValid()}
              className="btn-enhanced min-w-[120px]"
            >
              {isLoading ? (
                <>
                  <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2" />
                  {t("products.creating")}
                </>
              ) : (
                t("products.createProduct")
              )}
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
}
